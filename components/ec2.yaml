AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance with optional IAM role, architecture selection, and SSH access control

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName

  SSHCidr:
    Description: IP range that can SSH to the EC2 instance (e.g., 203.0.113.0/24)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]+$)
    ConstraintDescription: Must be a valid CIDR block (e.g., 203.0.113.0/24)

  Architecture:
    Description: Choose the instance architecture
    Type: String
    AllowedValues:
      - x8664
      - arm64
    Default: arm64

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC that contains the subnet

  EC2Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Select a subnet from your VPC

  InstanceRoleName:
    Description: Optional IAM Role name to attach to the instance
    Type: String
    Default: ""
    AllowedPattern: "^[a-zA-Z0-9+=,.@_-]{0,128}$"
    ConstraintDescription: Must be a valid IAM role name (or leave blank)

  InstanceName:
    Description: Name tag for the EC2 instance
    Type: String
    Default: my-ec2-instance

Mappings:
  ArchToAMI:
    x8664:
      AMI: ami-08aa372c213609089
      InstanceType: t3.nano
    arm64:
      AMI: ami-083b72f9e766cbb7c
      InstanceType: t4g.nano

Conditions:
  HasInstanceRole: !Not [!Equals [!Ref InstanceRoleName, ""]]

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidr

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: HasInstanceRole
    Properties:
      Roles:
        - !Ref InstanceRoleName

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [ArchToAMI, !Ref Architecture, InstanceType]
      ImageId: !FindInMap [ArchToAMI, !Ref Architecture, AMI]
      KeyName: !Ref KeyName
      SubnetId: !Ref EC2Subnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !If [HasInstanceRole, !Ref InstanceProfile, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: !Ref InstanceName

Outputs:
  InstanceId:
    Description: The Instance ID
    Value: !Ref EC2Instance
  PublicIP:
    Description: Public IP of the instance
    Value: !GetAtt EC2Instance.PublicIp
  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref EC2SecurityGroup
  InstanceProfileName:
    Condition: HasInstanceRole
    Description: Name of the created instance profile
    Value: !Ref InstanceProfile